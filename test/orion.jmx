<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Orion Test Plan for TaskSupervisor" enabled="true">
      <stringProp name="TestPlan.comments">Please adjust the ORION_ADDRESS here
</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ORION_ADDRESS" elementType="Argument">
            <stringProp name="Argument.name">ORION_ADDRESS</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ORION_PORT" elementType="Argument">
            <stringProp name="Argument.name">ORION_PORT</stringProp>
            <stringProp name="Argument.value">1026</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONSTANT_TIMER_500MS" elementType="Argument">
            <stringProp name="Argument.name">CONSTANT_TIMER_500MS</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Set the content type here</stringProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Materialflow Examples" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">1</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">These examples shows the possibilities you have with LoTLan to describe Materialflows.
Start the Thread Group and the activated examples will be executed.

Note, that the examples are URL Encoded. If you want to understand the content of each example decode them yourself or visit the
documentation for the TaskSupervisor and head to the examples section.

A quick description of each Example can also be found in the comments section in the corresponding request below.</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransportGoodsPallet" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;TransportGoodsPallet&quot;,&#xd;
	&quot;type&quot;: &quot;Materialflow&quot;,&#xd;
	&quot;specification&quot;: {&#xd;
		&quot;value&quot;:  &quot;Location%20pickupItem%0A%20%20%20%20name%20%3D%20%22Tag10%22%0A%20%20%20%20type%20%3D%20%22pallet%22%0AEnd%0A%0ALocation%20dropoffItem%0A%20%20%20%20name%20%3D%20%22Tag12%22%0A%20%20%20%20type%20%3D%20%22pallet%22%0AEnd%0A%0AEvent%20agvLoadedAtPickupItem%0A%20%20%20%20name%20%3D%20%22realSensorAgvLoadedWs1%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0AEvent%20agvLoadedAtDropoffItem%0A%20%20%20%20name%20%3D%20%22realSensorAgvUnloadedWs2%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0ATransportOrderStep%20loadPickupItem%0A%20%20%20%20Location%20pickupItem%0A%20%20%20%20FinishedBy%20agvLoadedAtPickupItem%20%3D%3D%20True%20%0AEnd%0A%0ATransportOrderStep%20unloadDropoffItem%0A%20%20%20%20Location%20dropoffItem%0A%20%20%20%20FinishedBy%20agvLoadedAtDropoffItem%20%3D%3D%20True%0AEnd%0A%0ATask%20transportGoodsPallet%0A%20%20%20%20Transport%0A%20%20%20%20From%20loadPickupItem%0A%20%20%20%20To%20unloadDropoffItem%20%0AEnd%0A&quot;,&#xd;
		&quot;type&quot;: &quot;Text&quot;&#xd;
	},&#xd;
	&quot;ownerId&quot;: {&#xd;
		&quot;type&quot;: &quot;Text&quot;,&#xd;
		&quot;value&quot;: &quot;reviewers hmi&quot;&#xd;
	},&#xd;
	&quot;active&quot;: {&#xd;
		&quot;type&quot;: &quot;Boolean&quot;,&#xd;
		&quot;value&quot;: true&#xd;
	}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v2/entities</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">A simple Task which describes a Transport from one Location to another.


</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransportGoodsPallet_Forever" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;TransportGoodsPallet_Forever&quot;,&#xd;
	&quot;type&quot;: &quot;Materialflow&quot;,&#xd;
	&quot;specification&quot;: {&#xd;
		&quot;value&quot;:  &quot;Location%20pickupItem%0A%20%20%20%20name%20%3D%20%22Tag10%22%0A%20%20%20%20type%20%3D%20%22pallet%22%0AEnd%0A%0ALocation%20dropoffItem%0A%20%20%20%20name%20%3D%20%22Tag12%22%0A%20%20%20%20type%20%3D%20%22pallet%22%0AEnd%0A%0AEvent%20agvLoadedAtPickupItem%0A%20%20%20%20name%20%3D%20%22realSensorAgvLoadedWs1%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0AEvent%20agvLoadedAtDropoffItem%0A%20%20%20%20name%20%3D%20%22realSensorAgvUnloadedWs2%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0ATransportOrderStep%20loadPickupItem%0A%20%20%20%20Location%20pickupItem%0A%20%20%20%20FinishedBy%20agvLoadedAtPickupItem%20%3D%3D%20True%20%0AEnd%0A%0ATransportOrderStep%20unloadDropoffItem%0A%20%20%20%20Location%20dropoffItem%0A%20%20%20%20FinishedBy%20agvLoadedAtDropoffItem%20%3D%3D%20True%0AEnd%0A%0ATask%20transportGoodsPallet%0A%20%20%20%20Transport%0A%20%20%20%20From%20loadPickupItem%0A%20%20%20%20To%20unloadDropoffItem%20%0A%20%20%20%20OnDone%20transportGoodsPallet%0AEnd%0A&quot;,&#xd;
		&quot;type&quot;: &quot;Text&quot;&#xd;
	},&#xd;
	&quot;ownerId&quot;: {&#xd;
		&quot;type&quot;: &quot;Text&quot;,&#xd;
		&quot;value&quot;: &quot;reviewers hmi&quot;&#xd;
	},&#xd;
	&quot;active&quot;: {&#xd;
		&quot;type&quot;: &quot;Boolean&quot;,&#xd;
		&quot;value&quot;: true&#xd;
	}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v2/entities</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">The TransportGoodsPallet example but it runs forever.
The Task has itself as OnDone Task.</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransportGoodsPallet_TriggeredBy" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;TransportGoodsPallet_TriggeredBy&quot;,&#xd;
	&quot;type&quot;: &quot;Materialflow&quot;,&#xd;
	&quot;specification&quot;: {&#xd;
		&quot;value&quot;:  &quot;Location%20pickupItem%0A%20%20%20%20name%20%3D%20%22Tag10%22%0A%20%20%20%20type%20%3D%20%22pallet%22%0AEnd%0A%0ALocation%20dropoffItem%0A%20%20%20%20name%20%3D%20%22Tag12%22%0A%20%20%20%20type%20%3D%20%22pallet%22%0AEnd%0A%0AEvent%20buttonPressed%0A%20%20%20%20name%20%3D%20%22AUniqueNameforAButton%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0AEvent%20agvLoadedAtPickupItem%0A%20%20%20%20name%20%3D%20%22realSensorAgvLoadedWs1%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0AEvent%20agvLoadedAtDropoffItem%0A%20%20%20%20name%20%3D%20%22realSensorAgvUnloadedWs2%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0ATransportOrderStep%20loadPickupItem%0A%20%20%20%20Location%20pickupItem%0A%20%20%20%20FinishedBy%20agvLoadedAtPickupItem%20%3D%3D%20True%20%0AEnd%0A%0ATransportOrderStep%20unloadDropoffItem%0A%20%20%20%20Location%20dropoffItem%0A%20%20%20%20FinishedBy%20agvLoadedAtDropoffItem%20%3D%3D%20True%0AEnd%0A%0ATask%20transportGoodsPallet%0A%20%20%20%20TriggeredBy%20buttonPressed%20%3D%3D%20True%20%0A%20%20%20%20Transport%0A%20%20%20%20From%20loadPickupItem%0A%20%20%20%20To%20unloadDropoffItem%20%0AEnd%0A&quot;,&#xd;
		&quot;type&quot;: &quot;Text&quot;&#xd;
	},&#xd;
	&quot;ownerId&quot;: {&#xd;
		&quot;type&quot;: &quot;Text&quot;,&#xd;
		&quot;value&quot;: &quot;reviewers hmi&quot;&#xd;
	},&#xd;
	&quot;active&quot;: {&#xd;
		&quot;type&quot;: &quot;Boolean&quot;,&#xd;
		&quot;value&quot;: true&#xd;
	}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v2/entities</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">A simple Task with a TriggeredBy condition.
The Task can only start if the button is pressed.</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransportGoodsPallet_FinishedBy" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;TransportGoodsPallet_FinishedBy&quot;,&#xd;
	&quot;type&quot;: &quot;Materialflow&quot;,&#xd;
	&quot;specification&quot;: {&#xd;
		&quot;value&quot;:  &quot;Location%20pickupItem%0A%20%20%20%20name%20%3D%20%22Tag10%22%0A%20%20%20%20type%20%3D%20%22pallet%22%0AEnd%0A%0ALocation%20dropoffItem%0A%20%20%20%20name%20%3D%20%22Tag12%22%0A%20%20%20%20type%20%3D%20%22pallet%22%0AEnd%0A%0AEvent%20buttonPressed%0A%20%20%20%20name%20%3D%20%22AUniqueNameforAButton%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0AEvent%20agvLoadedAtPickupItem%0A%20%20%20%20name%20%3D%20%22realSensorAgvLoadedWs1%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0AEvent%20agvLoadedAtDropoffItem%0A%20%20%20%20name%20%3D%20%22realSensorAgvUnloadedWs2%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0ATransportOrderStep%20loadPickupItem%0A%20%20%20%20Location%20pickupItem%0A%20%20%20%20FinishedBy%20agvLoadedAtPickupItem%20%3D%3D%20True%20%0AEnd%0A%0ATransportOrderStep%20unloadDropoffItem%0A%20%20%20%20Location%20dropoffItem%0A%20%20%20%20FinishedBy%20agvLoadedAtDropoffItem%20%3D%3D%20True%0AEnd%0A%0ATask%20transportGoodsPallet%0A%20%20%20%20Transport%0A%20%20%20%20From%20loadPickupItem%0A%20%20%20%20To%20unloadDropoffItem%0A%20%20%20%20FinishedBy%20buttonPressed%20%3D%3D%20True%20%20%0AEnd&quot;,&#xd;
		&quot;type&quot;: &quot;Text&quot;&#xd;
	},&#xd;
	&quot;ownerId&quot;: {&#xd;
		&quot;type&quot;: &quot;Text&quot;,&#xd;
		&quot;value&quot;: &quot;reviewers hmi&quot;&#xd;
	},&#xd;
	&quot;active&quot;: {&#xd;
		&quot;type&quot;: &quot;Boolean&quot;,&#xd;
		&quot;value&quot;: true&#xd;
	}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v2/entities</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">A simple Task with a FinishedBy condition.
The Task will be executed like the TransportGoodsPallet example but it will be only marked as finished when the FinishedBy condition is satisfied.</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransportGoodsPallet_OnDone" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;TransportGoodsPallet_OnDone&quot;,&#xd;
	&quot;type&quot;: &quot;Materialflow&quot;,&#xd;
	&quot;specification&quot;: {&#xd;
		&quot;value&quot;:  &quot;Location%20pickupItem%0A%20%20%20%20name%20%3D%20%22Tag10%22%0A%20%20%20%20type%20%3D%20%22pallet%22%0AEnd%0A%0ALocation%20dropoffItem%0A%20%20%20%20name%20%3D%20%22Tag12%22%0A%20%20%20%20type%20%3D%20%22pallet%22%0AEnd%0A%0AEvent%20agvLoadedAtPickupItem%0A%20%20%20%20name%20%3D%20%22realSensorAgvLoadedWs1%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0AEvent%20agvLoadedAtDropoffItem%0A%20%20%20%20name%20%3D%20%22realSensorAgvUnloadedWs2%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0ATransportOrderStep%20loadPickupItem%0A%20%20%20%20Location%20pickupItem%0A%20%20%20%20FinishedBy%20agvLoadedAtPickupItem%20%3D%3D%20True%20%0AEnd%0A%0ATransportOrderStep%20unloadDropoffItem%0A%20%20%20%20Location%20dropoffItem%0A%20%20%20%20FinishedBy%20agvLoadedAtDropoffItem%20%3D%3D%20True%0AEnd%0A%0ATask%20transportGoodsPallet%0A%20%20%20%20Transport%0A%20%20%20%20From%20loadPickupItem%0A%20%20%20%20To%20unloadDropoffItem%20%0A%20%20%20%20OnDone%20transportGoodsPallet2%0AEnd%0A%0ATask%20transportGoodsPallet2%0A%20%20%20%20Transport%0A%20%20%20%20From%20loadPickupItem%0A%20%20%20%20To%20unloadDropoffItem%20%0AEnd&quot;,&#xd;
		&quot;type&quot;: &quot;Text&quot;&#xd;
	},&#xd;
	&quot;ownerId&quot;: {&#xd;
		&quot;type&quot;: &quot;Text&quot;,&#xd;
		&quot;value&quot;: &quot;reviewers hmi&quot;&#xd;
	},&#xd;
	&quot;active&quot;: {&#xd;
		&quot;type&quot;: &quot;Boolean&quot;,&#xd;
		&quot;value&quot;: true&#xd;
	}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v2/entities</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">In this example the Task will be executed like in TransportGoodsPallet and after the first Task is done the Task definied in the OnDone statement will be executed next.</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransportGoodsPallet_Parallel" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;TransportGoodsPallet_Parallel&quot;,&#xd;
	&quot;type&quot;: &quot;Materialflow&quot;,&#xd;
	&quot;specification&quot;: {&#xd;
		&quot;value&quot;:  &quot;Location%20pickupItem%0A%20%20%20%20name%20%3D%20%22Tag10%22%0A%20%20%20%20type%20%3D%20%22pallet%22%0AEnd%0A%0ALocation%20dropoffItem%0A%20%20%20%20name%20%3D%20%22Tag12%22%0A%20%20%20%20type%20%3D%20%22pallet%22%0AEnd%0A%0AEvent%20agvLoadedAtPickupItem%0A%20%20%20%20name%20%3D%20%22realSensorAgvLoadedWs1%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0AEvent%20agvLoadedAtDropoffItem%0A%20%20%20%20name%20%3D%20%22realSensorAgvUnloadedWs2%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0ATransportOrderStep%20loadPickupItem%0A%20%20%20%20Location%20pickupItem%0A%20%20%20%20FinishedBy%20agvLoadedAtPickupItem%20%3D%3D%20True%20%0AEnd%0A%0ATransportOrderStep%20unloadDropoffItem%0A%20%20%20%20Location%20dropoffItem%0A%20%20%20%20FinishedBy%20agvLoadedAtDropoffItem%20%3D%3D%20True%0AEnd%0A%0ATask%20transportGoodsPallet%0A%20%20%20%20Transport%0A%20%20%20%20From%20loadPickupItem%0A%20%20%20%20To%20unloadDropoffItem%0AEnd%0A%0ATask%20transportGoodsPallet2%0A%20%20%20%20Transport%0A%20%20%20%20From%20loadPickupItem%0A%20%20%20%20To%20unloadDropoffItem%20%0AEnd%0A&quot;,&#xd;
		&quot;type&quot;: &quot;Text&quot;&#xd;
	},&#xd;
	&quot;ownerId&quot;: {&#xd;
		&quot;type&quot;: &quot;Text&quot;,&#xd;
		&quot;value&quot;: &quot;reviewers hmi&quot;&#xd;
	},&#xd;
	&quot;active&quot;: {&#xd;
		&quot;type&quot;: &quot;Boolean&quot;,&#xd;
		&quot;value&quot;: true&#xd;
	}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v2/entities</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">In this example two Tasks which are independent from each other are definied, so they can run in parallel.</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransportGoodsPallet_Invalid" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;: &quot;TransportGoodsPallet_Invalid&quot;,&#xd;
	&quot;type&quot;: &quot;Materialflow&quot;,&#xd;
	&quot;specification&quot;: {&#xd;
		&quot;value&quot;:  &quot;Location%20pickupItem%0A%20%20%20%20name%20%3D%20%22Tag10%22%0A%20%20%20%20type%20%3D%20%22pallet%22%0AEnd%0A%0ALocation%20dropoffItem%0A%20%20%20%20name%20%3D%20%22Tag12%22%0A%20%20%20%20type%20%3D%20%22pallet%22%0AEnd%0A%0AEvent%20agvLoadedAtPickupItem%0A%20%20%20%20name%20%3D%20%22realSensorAgvLoadedWs1%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0AEvent%20agvLoadedAtDropoffItem%0A%20%20%20%20name%20%3D%20%22realSensorAgvUnloadedWs2%22%0A%20%20%20%20type%20%3D%20%22Boolean%22%0AEnd%0A%0ATransportOrderStep%20loadPickupItem%0A%20%20%20%20Location%20pickupItem%0A%20%20%20%20FinishedBy%20agvLoadedAtPickupItem%20%3D%3D%20True%20%0AEnd%0A%0ATransportOrderStep%20unloadDropoffItem%0A%20%20%20%20Location%20dropoffItem%0A%20%20%20%20FinishedBy%20agvLoadedAtDropoffItem%20%3D%3D%20True%0AEnd%0A%0Atask%20TransportGoodsPallet%0A%20%20%20%20Transport%0A%20%20%20%20From%20loadPickupItem%0A%20%20%20%20To%20unloadDropoffItem%20%0AEnd&quot;,&#xd;
		&quot;type&quot;: &quot;Text&quot;&#xd;
	},&#xd;
	&quot;ownerId&quot;: {&#xd;
		&quot;type&quot;: &quot;Text&quot;,&#xd;
		&quot;value&quot;: &quot;reviewers hmi&quot;&#xd;
	},&#xd;
	&quot;active&quot;: {&#xd;
		&quot;type&quot;: &quot;Boolean&quot;,&#xd;
		&quot;value&quot;: true&#xd;
	}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v2/entities</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">This File violates our grammar rules.
If you try to start it, the schedular should not execute it and instead returns an error message containing more information.

In this specifiy example the Task keyword starts with a lower case character which is forbidden.
The supervisor should print the error message and shoudl throw a Materialflow specification error.</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sensor Creation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">This Thread Group creates the Orion entities for the Sensors used in the Materialflow examples (agvLoadedAtPickupItem, agvLoadedAtDropoffItem, buttonPallet)</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Trigger Sensor buttonPallet" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;AUniqueNameforAButton&quot;,&#xd;
        &quot;type&quot;: &quot;SensorAgent&quot;,&#xd;
        &quot;measurementType&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;boolean&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;modifiedTime&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;2019-09-11T09:36:53Z&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;readings&quot;: {&#xd;
            &quot;type&quot;: &quot;array&quot;,&#xd;
            &quot;value&quot;: [&#xd;
                {&#xd;
                    &quot;type&quot;: &quot;SensorReading&quot;,&#xd;
                    &quot;value&quot;: {&#xd;
                        &quot;reading&quot;: {&#xd;
                            &quot;type&quot;: &quot;boolean&quot;,&#xd;
                            &quot;value&quot;: false&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            ],&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;sanID&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;SAN1&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;sensorID&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;AUniqueNameforAButton&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;sensorManufacturer&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;LLC&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;sensorType&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;ON_OFF_SENSOR&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;units&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;boolean&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        }&#xd;
    }&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v2/entities</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sensor agvLoadedAtPickupItem" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;realSensorAgvLoadedWs1&quot;,&#xd;
        &quot;type&quot;: &quot;SensorAgent&quot;,&#xd;
        &quot;measurementType&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;boolean&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;modifiedTime&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;2019-09-11T09:36:53Z&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;readings&quot;: {&#xd;
            &quot;type&quot;: &quot;array&quot;,&#xd;
            &quot;value&quot;: [&#xd;
                {&#xd;
                    &quot;type&quot;: &quot;SensorReading&quot;,&#xd;
                    &quot;value&quot;: {&#xd;
                        &quot;reading&quot;: {&#xd;
                            &quot;type&quot;: &quot;boolean&quot;,&#xd;
                            &quot;value&quot;: false&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            ],&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;sanID&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;SAN1&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;sensorID&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;realSensorAgvLoadedWs1&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;sensorManufacturer&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;LLC&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;sensorType&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;ON_OFF_SENSOR&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;units&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;boolean&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        }&#xd;
    }&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v2/entities</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sensor agvLoadedAtDropoffItem" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;realSensorAgvUnloadedWs2&quot;,&#xd;
        &quot;type&quot;: &quot;SensorAgent&quot;,&#xd;
        &quot;measurementType&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;boolean&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;modifiedTime&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;2019-09-11T09:36:53Z&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;readings&quot;: {&#xd;
            &quot;type&quot;: &quot;array&quot;,&#xd;
            &quot;value&quot;: [&#xd;
                {&#xd;
                    &quot;type&quot;: &quot;SensorReading&quot;,&#xd;
                    &quot;value&quot;: {&#xd;
                        &quot;reading&quot;: {&#xd;
                            &quot;type&quot;: &quot;boolean&quot;,&#xd;
                            &quot;value&quot;: false&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            ],&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;sanID&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;SAN1&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;sensorID&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;realSensorAgvUnloadedWs2&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;sensorManufacturer&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;LLC&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;sensorType&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;ON_OFF_SENSOR&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        },&#xd;
        &quot;units&quot;: {&#xd;
            &quot;type&quot;: &quot;string&quot;,&#xd;
            &quot;value&quot;: &quot;boolean&quot;,&#xd;
            &quot;metadata&quot;: {}&#xd;
        }&#xd;
    }&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v2/entities</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TOGGLE Sensor agvLoadedAtPickupItem" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Represents a button/trigger at the pickup location. If loading is done this can be activated.
Note: Currently only manual loading / unloading is supported</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Active" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
         &#xd;
        &quot;readings&quot;: {&#xd;
            &quot;type&quot;: &quot;array&quot;,&#xd;
            &quot;value&quot;: [&#xd;
                {&#xd;
                    &quot;type&quot;: &quot;SensorReading&quot;,&#xd;
                    &quot;value&quot;: {&#xd;
                        &quot;reading&quot;: {&#xd;
                            &quot;type&quot;: &quot;boolean&quot;,&#xd;
                            &quot;value&quot;: true&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            ],&#xd;
            &quot;metadata&quot;: {}&#xd;
        } &#xd;
    }&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v2/entities/realSensorAgvLoadedWs1/attrs</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Inactive" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
         &#xd;
        &quot;readings&quot;: {&#xd;
            &quot;type&quot;: &quot;array&quot;,&#xd;
            &quot;value&quot;: [&#xd;
                {&#xd;
                    &quot;type&quot;: &quot;SensorReading&quot;,&#xd;
                    &quot;value&quot;: {&#xd;
                        &quot;reading&quot;: {&#xd;
                            &quot;type&quot;: &quot;boolean&quot;,&#xd;
                            &quot;value&quot;: false&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            ],&#xd;
            &quot;metadata&quot;: {}&#xd;
        } &#xd;
    }&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v2/entities/realSensorAgvLoadedWs1/attrs</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${CONSTANT_TIMER_500MS}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TOGGLE Sensor at agvLoadedAtDropoffItem" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Represents a button/trigger at the pickup location. If loading is done this can be activated.
Note: Currently only manual loading / unloading is supported</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Active" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
         &#xd;
        &quot;readings&quot;: {&#xd;
            &quot;type&quot;: &quot;array&quot;,&#xd;
            &quot;value&quot;: [&#xd;
                {&#xd;
                    &quot;type&quot;: &quot;SensorReading&quot;,&#xd;
                    &quot;value&quot;: {&#xd;
                        &quot;reading&quot;: {&#xd;
                            &quot;type&quot;: &quot;boolean&quot;,&#xd;
                            &quot;value&quot;: true&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            ],&#xd;
            &quot;metadata&quot;: {}&#xd;
        } &#xd;
    }&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v2/entities/realSensorAgvUnloadedWs2/attrs</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Inactive" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
         &#xd;
        &quot;readings&quot;: {&#xd;
            &quot;type&quot;: &quot;array&quot;,&#xd;
            &quot;value&quot;: [&#xd;
                {&#xd;
                    &quot;type&quot;: &quot;SensorReading&quot;,&#xd;
                    &quot;value&quot;: {&#xd;
                        &quot;reading&quot;: {&#xd;
                            &quot;type&quot;: &quot;boolean&quot;,&#xd;
                            &quot;value&quot;: false&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            ],&#xd;
            &quot;metadata&quot;: {}&#xd;
        } &#xd;
    }&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v2/entities/realSensorAgvUnloadedWs2/attrs</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${CONSTANT_TIMER_500MS}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TOGGLE Sensor button" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">Represents a button for testing TriggeredBy and FinishedBy

In our example it could be a button at the AGV parking space which has to be pressed to start or finish a Task.</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Active" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
         &#xd;
        &quot;readings&quot;: {&#xd;
            &quot;type&quot;: &quot;array&quot;,&#xd;
            &quot;value&quot;: [&#xd;
                {&#xd;
                    &quot;type&quot;: &quot;SensorReading&quot;,&#xd;
                    &quot;value&quot;: {&#xd;
                        &quot;reading&quot;: {&#xd;
                            &quot;type&quot;: &quot;boolean&quot;,&#xd;
                            &quot;value&quot;: true&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            ],&#xd;
            &quot;metadata&quot;: {}&#xd;
        } &#xd;
    }&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v2/entities/AUniqueNameforAButton/attrs</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Inactive" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
         &#xd;
        &quot;readings&quot;: {&#xd;
            &quot;type&quot;: &quot;array&quot;,&#xd;
            &quot;value&quot;: [&#xd;
                {&#xd;
                    &quot;type&quot;: &quot;SensorReading&quot;,&#xd;
                    &quot;value&quot;: {&#xd;
                        &quot;reading&quot;: {&#xd;
                            &quot;type&quot;: &quot;boolean&quot;,&#xd;
                            &quot;value&quot;: false&#xd;
                        }&#xd;
                    }&#xd;
                }&#xd;
            ],&#xd;
            &quot;metadata&quot;: {}&#xd;
        } &#xd;
    }&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v2/entities/AUniqueNameforAButton/attrs</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${CONSTANT_TIMER_500MS}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Materialflow Removal" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Parameter" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="1808022304">MaterialflowName</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1317577873">
              <stringProp name="1747358669">TransportGoodsPallet</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Length</stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransportGoodsPallet ENTITY USER VARIABLE" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v2/entities/${MaterialflowName}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Subscription Removal" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Parameter" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="476797752">SubscriptionId</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1117795416">
              <stringProp name="1658841381">5ebadd8ce869e9cc57901207</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Length</stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="paste the ID inside the PATH" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v2/subscriptions/${SubscriptionId}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Materialflow Disabler/Enabler" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="TestPlan.comments">If a Materialflow is done it can be started again if its active value is toggled.
This thread group sets the active attribute to false and immediatly to true, so the Task will be started again.

To specify which Materialflow should be restarted, type in the name in the &quot;Materialflow To Restart&quot; section.</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Materialflow To Restart" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="MATERIALFLOW" elementType="Argument">
              <stringProp name="Argument.name">MATERIALFLOW</stringProp>
              <stringProp name="Argument.value">TransportGoodsPallet_TriggeredBy</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
          <stringProp name="TestPlan.comments">Here you can specify which Materialflow should be started again.</stringProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Inactive" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   	&quot;active&quot;: {&#xd;
		&quot;type&quot;: &quot;Boolean&quot;,&#xd;
		&quot;value&quot;: false&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v2/entities/${MATERIALFLOW}/attrs</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Active" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{        &#xd;
	&quot;active&quot;: {&#xd;
		&quot;type&quot;: &quot;Boolean&quot;,&#xd;
		&quot;value&quot;: true&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ORION_ADDRESS}</stringProp>
          <stringProp name="HTTPSampler.port">${ORION_PORT}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/v2/entities/${MATERIALFLOW}/attrs</stringProp>
          <stringProp name="HTTPSampler.method">PATCH</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${CONSTANT_TIMER_500MS}</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
